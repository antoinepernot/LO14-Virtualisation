#!/bin/bash
#
# The MIT License (MIT)
#
# Copyright (c) 2015 Halouoi Hamza <halouoi.hamza@utt.fr>, Antoine Pernot <antoine.pernot@utt.fr>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

# +------------------------------------------------------+
# | ATTENTION : Ce script nécessite le programme sqlite3 |
# +------------------------------------------------------+

# La section ci-dessous pourra être supprimée si le présent programme est distribué sous la forme d'un paquet Debian avec comme fichier DEBIAN/control :
#
# ----- DEBUT DE FICHIER DEBIAN/control -----
# Package: rvsh
# Version: 1.0
# Section: system
# Priority: optional
# Architecture: all
# Depends: sqlite3
# Maintainer: Halouoi Hamza <halouoi.hamza@utt.fr>, Antoine Pernot <antoine.pernot@utt.fr>
# Description: Shell de réseau virtuel
# -----  FIN DE FICHIER DEBIAN/control  -----

# ----- DEBUT DE SECTION -----
function install_sqlite {
    echo "rvsh dépends de sqlite3. Nous allons l'installer …"
    sudo apt-get -y install sqlite3
}

dpkg -s sqlite3 2>/dev/null >/dev/null || install_sqlite
# -----  FIN DE SECTION  -----

function help {
    whiptail --title "rvsh - Aide" --ok-button "Fermer" --msgbox "Aide pour la commande rvsh\n\n–connect <HOST> <USER> : Se connecter à la machine HOST avec l'utilisateur USER.\n–admin                 : Gestion des machines connectées au réseau virtuel et la liste des utilisateurs." 11 84 3>&1 1>&2 2>&3
}

databasefile='database.db'

declare -a user_stack
declare -a host_stack
declare -a logintime_stack
declare -a compid_stack

function error_log {
    level=$1
    datetime=$(date +%s)
    program=$2
    msg=$3
    sqlite3 ${databasefile} "INSERT INTO syslog (host,level,datetime,program,msg) VALUES ('${host}','${level}','${datetime}','${program}','${msg}');"

    if [[ ${level} -le 4 ]]
    then
	   echo ${msg} >&2
    else
	       echo ${msg}
    fi
}

function admin {
    passwd=$(whiptail --passwordbox "Entrez le mot de passe de connexion : " 8 78 --title "rvsh - Connexion au mode administrateur" 3>&1 1>&2 2>&3)
    hash=$(echo -n $passwd | sha512sum | awk '{ print $1 }')
    ctrl=$(sqlite3 ${databasefile} "SELECT value FROM config WHERE key = 'admin_passwd';")
    if [[ $hash = $ctrl ]]
    then
        motd=$(sqlite3 ${databasefile} "SELECT value FROM config WHERE key = 'motd';")
        echo -e "${motd}"
    	cmd=''
    	hist=''
    	while [[ $cmd != 'exit' ]]
    	do
    	    echo -ne "\033[1;31mrvsh > \033[0m"
    	    read cmd
    	    if [[ $cmd != '!!' ]]
    	    then
    		      hist=${cmd}
    	    else
        		cmd=${hist}
        		echo $cmd
    	    fi
    	    com=`echo ${cmd} | cut -d' ' -f1`
    	    param=`echo ${cmd} | cut -d' ' -f2-`
    	    case "$com" in
    		"exit"		) echo "Déconnexion";;
    		"host"		) host $param;;
            "help"      ) admin_help;;
    		"users"		) users $param;;
    		"clear"		) clear;;
    		"afinger"	) afinger $param;;
    		"passwd"	) admin_passwd;;
    		"rhost"		) rhost;;
    		"connect"	) connect $param;;
    		"su"		) connect $host $param;;
    		"who"		) who;;
    		"rusers"	) rusers;;
    		"write"		) write $param;;
            "motd"      ) motd $param;;
            "syslog"    ) syslog;;
            "42"        ) easter;;
    		*	    	) echo "Commande inconnue. " >&2
    	    esac
    	done
    else
	       error_log 3 'admin-connect' "Mot de passe incorrect. "
    fi
}

function admin_help {
    whiptail --title "rvsh - Aide" --ok-button "Fermer" --msgbox "Commandes disponibles au mode admin\n\nafinger : Renseigne les informations complémentaires sur l'utilisateur.\nclear   : Effacer le terminal.\nconnect : Connexion à une machine virtuelle.\nexit    : Fermer la session courante.\nhelp    : Affiche cette aide.\nhost    : Gestion des postes du réseau.\nmotd    : Modifie le message d'accueil. \npasswd  : Modifier son mot de passe.\nrhost   : Liste les postes du réseau.\nrusers  : Liste les utilisateurs du réseau.\nsu      : Changer d'utilisateur.\nusers   : Gestion des utilisateurs du réseau.\nwho     : Liste les utilisateurs connectés.\nwrite   : Envoyer un message à un utilisateur." 22 84 3>&1 1>&2 2>&3
}

function create_database {
    echo "Base de données abscente, création de la base '${databasefile}'. " >&2
    sqlite3 ${databasefile} "CREATE TABLE users (login TEXT PRIMARY KEY, nom TEXT, prenom TEXT, passwd TEXT, courriel TEXT, telephone CHAR(10));"
    sqlite3 ${databasefile} "CREATE TABLE hosts (hostname TEXT PRIMARY KEY);"
    sqlite3 ${databasefile} "CREATE TABLE grants (login TEXT, hostname TEXT, FOREIGN KEY(login) REFERENCES users(login), FOREIGN KEY(hostname) REFERENCES hosts(hostname));"
    sqlite3 ${databasefile} "CREATE TABLE config (key TEXT PRIMARY KEY, value TEXT);"
    sqlite3 ${databasefile} "CREATE TABLE authlog (id INTEGER PRIMARY KEY AUTOINCREMENT, login TEXT, hostname TEXT, login_timestamp INTEGER, logout_timestamp INTEGER, FOREIGN KEY(login) REFERENCES users(login), FOREIGN KEY(hostname) REFERENCES hosts(hostname));"
    sqlite3 ${databasefile} "CREATE TABLE syslog (id INTEGER PRIMARY KEY AUTOINCREMENT, host TEXT, level INTEGER, datetime INTEGER, program TEXT, msg TEXT, FOREIGN KEY(host) REFERENCES hosts(hostname));"
    sqlite3 ${databasefile} "CREATE TABLE activesh (id INTEGER PRIMARY KEY AUTOINCREMENT, pid INTEGER, login TEXT, host TEXT, logintime INTEGER, comport INTEGER, compid INTEGER, FOREIGN KEY(login) REFERENCES users(login), FOREIGN KEY(host) REFERENCES hosts(hostname));"

    # Définition du mot de passe d'administration. Ici, le mot de passe par défaut est 'AdaLovelace'.
    sqlite3 ${databasefile} "INSERT INTO config (key, value) VALUES ('admin_passwd','c6fad173ccc1d73c9b416a51295e1cc322fbc4141d5f5658e1148e6be18b53d1b434420ba2df7980aa3bf37c7b2339f46af07e30ad814c282c617175f5b98abd');"
    sqlite3 ${databasefile} "INSERT INTO config (key, value) VALUES ('motd',\"                 _     \n  _ ____   _____| |__  \n | '__\\ \\ / / __| '_ \\ \n | |   \\ V /\\__ \\ | | |\n |_|    \\_/ |___/_| |_|\n                       \");"

    sqlite3 ${databasefile} "CREATE TABLE files (id INTEGER PRIMARY KEY AUTOINCREMENT, type TEXT DEFAULT 'text', owner TEXT, content BLOB, FOREIGN KEY(owner) REFERENCES users(login));"
    sqlite3 ${databasefile} "CREATE TABLE keywords (id_fic INTEGER, keyword TEXT, FOREIGN KEY(id_fic) REFERENCES files(id));"
}

function create_host {
    hostname=''
    while [[ $hostname = '' ]]
    do
	       hostname=$(whiptail --inputbox "Entrez le nom de la machine (hostname) : " 8 78 --title "rvsh - Créer une machine virtuelle" 3>&1 1>&2 2>&3)
    done
    sqlite3 ${databasefile} "INSERT INTO hosts (hostname) VALUES ('${hostname}');"
}

function delete_host {
    nbhosts=$(sqlite3 -column ${databasefile} "SELECT hostname FROM hosts;" | wc -l)
    hosts=$(sqlite3 -column ${databasefile} "SELECT hostname FROM hosts;" | sed -e 's/\(.*\)$/\1 \1 OFF/g')
    if [[ $nbhosts -gt 0 ]]
    then
    	host=$(whiptail --title "rvsh - Suppession de machines virtuelles" --checklist "Choisissez les postes à supprimer : " 20 78 ${nbhosts} ${hosts} 3>&1 1>&2 2>&3)
    	for el in ${host}
    	do
    	    echo "Suppession du poste ${el}. "
    	    sqlite3 ${databasefile} "DELETE FROM hosts WHERE hostname = ${el};"
    	    sqlite3 ${databasefile} "DELETE FROM grants WHERE hostname = ${el};"
    	done
    else
	       echo "Aucun poste enregistré sur le réseau. " >&2
    fi
}

function list_host {
    sqlite3 ${databasefile} "SELECT hostname FROM hosts;"
}

function help_host {
    whiptail --title "rvsh - Aide" --ok-button "Fermer" --msgbox "Aide pour la commande host\n\n–add    | –a : Ajoute une machine au réseau. \n–remove | –r : Supprime une machine du réseau. \n–list   | –l : Liste les machines du réseau. " 11 84 3>&1 1>&2 2>&3
}

function create_user {
    nom=$(whiptail --inputbox "Entrez le nom de l'utilisateur : " 8 78 --title "rvsh - Créer un compte utilisateur" 3>&1 1>&2 2>&3)
    prenom=$(whiptail --inputbox "Entrez le prénom de l'utilisateur : " 8 78 --title "rvsh - Créer un compte utilisateur" 3>&1 1>&2 2>&3)
    login=''
    while [[ $login = '' ]]
    do
    	login=$(echo "`echo -n "${nom}" | tr 'A-Z' 'a-z' | cut -c 1-8``echo -n "${prenom}" | tr 'A-Z' 'a-z' | cut -c 1-2`")
    	login=$(whiptail --inputbox "Entrez l'identifiant de l'utilisateur (login) : " 8 78 ${login} --title "rvsh - Créer un compte utilisateur" 3>&1 1>&2 2>&3)
    done
    passwd1='a'
    passwd1='b'
    while [[ $passwd1 != $passwd2 ]]
    do
    	passwd1=''
    	while [[ $passwd1 = '' ]]
    	do
    	    passwd1=$(whiptail --passwordbox "Entrez le mot de passe (passwd) : " 8 78 --title "rvsh - Créer un compte utilisateur" 3>&1 1>&2 2>&3)
    	done
    	passwd2=''
    	while [[ $passwd2 = '' ]]
    	do
    	    passwd2=$(whiptail --passwordbox "Confirmez le mot de passe (passwd) : " 8 78 --title "rvsh - Créer un compte utilisateur" 3>&1 1>&2 2>&3)
    	done
    done
    hash=$(echo -n ${passwd1} | sha512sum | awk '{ print $1 }')
    sqlite3 ${databasefile} "INSERT INTO users (login, nom, prenom, passwd) VALUES ('${login}','${nom}','${prenom}','${hash}');"
}

function delete_user {
    nbuser=$(sqlite3 -column ${databasefile} "SELECT login FROM users;" | wc -l)
    users=$(sqlite3 -column ${databasefile} "SELECT login FROM users;" | sed -e 's/\(.*\)$/\1 \1 OFF/g')
    if [[ $nbuser -gt 0 ]]
    then
    	user=$(whiptail --title "rvsh - Suppession d'utilisateurs" --checklist "Choisissez les comptes utilisateurs à supprimer : " 20 78 ${nbuser} ${users} 3>&1 1>&2 2>&3)
    	for el in ${user}
    	do
    	    echo "Suppession de l'utilisateur ${el}. "
    	    sqlite3 ${databasefile} "DELETE FROM users WHERE login = ${el};"
    	    sqlite3 ${databasefile} "DELETE FROM grants WHERE login = ${el};"
    	done
    else
	    echo "Aucun utilisateur enregistré sur le réseau. " >&2
    fi
}


function list_user {
    sqlite3 ${databasefile} "SELECT login,nom,prenom FROM users;"
}

function grant_user {
    nbuser=$(sqlite3 -column ${databasefile} "SELECT login FROM users;" | wc -l)
    users=$(sqlite3 -column ${databasefile} "SELECT login FROM users;" | sed -e 's/\(.*\)$/\1 \1/g')
    if [[ $nbuser -gt 0 ]]
    then
	user=$(whiptail --title "rvsh - Gestion des droits d'accès" --menu "Choisissez le compte utilisateur à gérer : " 20 78 ${nbuser} ${users} 3>&1 1>&2 2>&3)
	nbhosts=$(sqlite3 -column ${databasefile} "SELECT hostname FROM hosts;" | wc -l)
	hosts=$(sqlite3 -column ${databasefile} "SELECT hostname FROM hosts;")
	if [[ $nbhosts -gt 0 ]]
	then
	    listhost=''
	    for el in ${hosts}
	    do
    		if [[ $(sqlite3 -column ${databasefile} "SELECT * FROM grants WHERE login = '${user}' AND hostname = '${el}';") ]]
    		then
    		    listhost="$listhost $el $el ON"
    		else
    		    listhost="$listhost $el $el OFF"
    		fi
	    done
	    host=$(whiptail --title "rvsh - Gestion des droits d'accès" --checklist "Choisissez les postes autorisés pour l'utilisateur ${user} : " 20 78 ${nbhosts} ${listhost} 3>&1 1>&2 2>&3)
	    sqlite3 ${databasefile} "DELETE FROM grants WHERE login = '${user}';"
	    for el in ${host}
	    do
		    sqlite3 ${databasefile} "INSERT INTO grants (login,hostname) VALUES ('${user}',${el});"
	    done
	else
	    echo "Aucun poste enregistré sur le réseau. " >&2
	fi
    else
	echo "Aucun utilisateur enregistré sur le réseau. " >&2
    fi
}

function help_user {
    whiptail --title "rvsh - Aide" --ok-button "Fermer" --msgbox "Aide pour la commande users\n\n–add    | –a : Ajoute un utilisateur. \n–remove | –r : Supprime un utilisateur. \n–list   | –l : Liste les utiliateurs. \n–grant  | –g : Gestion des droits d'accès des utiliateurs. " 12 84 3>&1 1>&2 2>&3
}

function admin_passwd {
    passwd=$(whiptail --passwordbox "Entrez le mot de passe actuel : " 8 78 --title "rvsh - Modification du mot de passe administrateur" 3>&1 1>&2 2>&3)
    hash=$(echo -n $passwd | sha512sum | awk '{ print $1 }')
    ctrl=$(sqlite3 ${databasefile} "SELECT value FROM config WHERE key = 'admin_passwd';")
    if [[ $hash = $ctrl ]]
    then
    	passwd1=''
    	while [[ $passwd1 = '' ]]
    	do
    	    passwd1=$(whiptail --passwordbox "Entrez le nouveau mot de passe : " 8 78 --title "rvsh - Modification du mot de passe administrateur" 3>&1 1>&2 2>&3)
    	done
    	passwd2=''
    	while [[ $passwd2 = '' ]]
    	do
    	    passwd2=$(whiptail --passwordbox "Confirmez le nouveau mot de passe : " 8 78 --title "rvsh - Modification du mot de passe administrateur" 3>&1 1>&2 2>&3)
    	done
    	hash=$(echo -n ${passwd1} | sha512sum | awk '{ print $1 }')
    	sqlite3 ${databasefile} "UPDATE config SET value='${hash}' WHERE key = 'admin_passwd';"
    	error_log 5 'admin-passwd' "Mot de passe modifié avec succès. "
    else
	       error_log 3 'admin-passwd' "Mot de passe incorrect. "
    fi
}

function motd {
    sqlite3 ${databasefile} "UPDATE config SET value='${*}' WHERE key = 'motd';"
    echo "Message d'accueil modifié. "
}

function syslog {
    rep=$(sqlite3 ${databasefile} "SELECT * FROM syslog DESC;")
    out="No|Poste|Priorité|Date|Programme|Message\n"
    OLDIFS=$IFS
    IFS=$'\n'
    for el in ${rep}
    do
    	id=$(echo "${el}" | cut -d'|' -f1 )
        host=$(echo "${el}" | cut -d'|' -f2 )
        level=$(echo "${el}" | cut -d'|' -f3 )
    	timestamp=$(echo "${el}" | cut -d'|' -f4 )
        program=$(echo "${el}" | cut -d'|' -f5 )
        msg=$(echo "${el}" | cut -d'|' -f6 )
        priority=""
        case "$level" in
            "0" ) priority="panic" ;;
            "1" ) priority="alert" ;;
            "2" ) priority="crit"  ;;
            "3" ) priority="err"   ;;
            "4" ) priority="warn"  ;;
            "5" ) priority="notice";;
            "6" ) priority="info"  ;;
            "7" ) priority="debug" ;;
        esac
    	date=$(date --date="@${timestamp}" +"%d/%m/%Y %T")
    	out=${out}"${id}|${host}|${priority}|${date}|${program}|${msg}\n"
    done
    IFS=${OLDIFS}
    echo -e $out | column -t -s '|'
}

function who {
    rep=$(sqlite3 ${databasefile} "SELECT login,login_timestamp FROM authlog WHERE hostname = '${host}' AND logout_timestamp IS NULL ;")
    out="Utilisateur\tDate de connexion\n"
    for el in ${rep}
    do
    	login=$(echo ${el} | cut -d'|' -f1 )
    	timestamp=$(echo ${el} | cut -d'|' -f2 )
    	date=$(date --date="@${timestamp}")
    	out=${out}"${login}\t${date}\n"
    done
    echo -e $out | column -t -s $'\t'
}

function rusers {
    rep=$(sqlite3 ${databasefile} "SELECT login,hostname,login_timestamp FROM authlog WHERE logout_timestamp IS NULL ;")
    out="Utilisateur\tPoste\tDate de connexion\n"
    for el in ${rep}
    do
    	login=$(echo ${el} | cut -d'|' -f1 )
    	hostname=$(echo ${el} | cut -d'|' -f2 )
    	timestamp=$(echo ${el} | cut -d'|' -f3 )
    	date=$(date --date="@${timestamp}")
    	out=${out}"${login}\t${hostname}\t${date}\n"
    done
    echo -e $out | column -t -s $'\t'
}

function connect {
    host_stack=(${host_stack[@]} $1)
    user_stack=(${user_stack[@]} $2)
    logintime_stack=(${logintime_stack[@]} $(date +%s))
    host=$1
    user=$2
    nc -dkl -p $((10000 + ${#host_stack[@]} + $$)) &
    sqlite3 ${databasefile} "INSERT INTO activesh (pid,login,host,logintime,compid,comport) VALUES ('$$','${user}','${host}','$(date +%s)','$!','$((10000 + ${#host_stack[@]} + $$))');"
    compid_stack=(${compid_stack[@]} $!)
    if [[ $(sqlite3 -column ${databasefile} "SELECT * FROM grants WHERE login = '${user}' AND hostname = '${host}';") ]]
    then
    	passwd=$(whiptail --passwordbox "Entrez le mot de passe de connexion : " 8 78 --title "rvsh - Connexion au réseau" 3>&1 1>&2 2>&3)
    	hash=$(echo -n $passwd | sha512sum | awk '{ print $1 }')
    	ctrl=$(sqlite3 ${databasefile} "SELECT passwd FROM users WHERE login = '${user}';")
    	if [[ $hash = $ctrl ]]
    	then
    	    timestamp=${logintime_stack[${#logintime_stack[@]}-1]}
    	    sqlite3 ${databasefile} "INSERT INTO authlog (login,hostname,login_timestamp) VALUES ('${user}','${host}','${timestamp}');"
    	    cmd=''
    	    hist=''
            motd=$(sqlite3 ${databasefile} "SELECT value FROM config WHERE key = 'motd';")
            echo -e "${motd}"
    	    while [[ $cmd != 'exit' ]]
    	    do
        		echo -ne "\033[1;36m${user}\033[1;37m@\033[1;33m${host}\033[1;37m > \033[0m"
        		read cmd
        		if [[ $cmd != '!!' ]]
        		then
        		    hist=${cmd}
        		else
        		    cmd=${hist}
        		    echo $cmd
        		fi
        		com=`echo ${cmd} | cut -d' ' -f1`
        		param=`echo ${cmd} | cut -d' ' -f2-`
        		case "$com" in
        		    "exit"	    ) echo "Déconnexion";;
                    "help"      ) user_help;;
                    "clear"		) clear;;
        		    "rhost"	    ) rhost;;
        		    "rusers"	) rusers;;
        		    "passwd"	) users_passwd;;
        		    "connect"	) connect $param;;
        		    "su"	    ) connect $host $param;;
        		    "who"	    ) who;;
        		    "write"	    ) write $param;;
                    "editor"    ) editor $param;;
                    "open"      ) searchfile "open";;
                    "rm"        ) searchfile "rm";;
                    "cp"        ) searchfile "cp";;
                    "chkey"     ) searchfile "chkey";;
                    "finger"    ) finger;;
                    "42"        ) easter;;
        		    *		    ) echo "Commande inconnue. " >&2;;
        		esac
    	    done
    	else
    	    error_log 3 'connect' "${user}@${host} - Connexion refusée : mot de passe incorrect. "
    	fi
    else
	       error_log 3 'connect' "${user}@${host} - Connexion refusée : permission non accordée. "
    fi
    timestamp=$(date +%s)
    login_timestamp=${logintime_stack[${#logintime_stack[@]}-1]}
    sqlite3 ${databasefile} "UPDATE authlog SET logout_timestamp='${timestamp}' WHERE login_timestamp='${login_timestamp}' AND login='${user}' AND hostname='${host}';"
    kill -9 ${compid_stack[${#compid_stack[@]}-1]}
    wait ${compid_stack[${#compid_stack[@]}-1]} 2>/dev/null
    unset compid_stack[${#compid_stack[@]}-1]
    activeshid=$(sqlite3 ${databasefile} "SELECT id FROM activesh WHERE login='${user}' AND host='${host}' AND pid='$$' ORDER BY id DESC LIMIT 1;")
    sqlite3 ${databasefile} "DELETE FROM activesh WHERE id='${activeshid}';"
    if [[ ${#host_stack[@]} -gt 1 ]]
    then
        cmd=''
    	unset host_stack[${#host_stack[@]}-1]
    	unset user_stack[${#user_stack[@]}-1]
    	unset logintime_stack[${#logintime_stack[@]}-1]
    	host=${host_stack[${#host_stack[@]}-1]}
    	user=${user_stack[${#user_stack[@]}-1]}
    fi
}

function user_help {
    whiptail --title "rvsh - Aide" --ok-button "Fermer" --msgbox "Commandes disponibles au mode connect\n\nchkey   : Modifier les mots clés d'un fichier.\nclear   : Effacer le terminal.\nconnect : Connexion à une machine virtuelle.\ncp      : Copier un fichier.\neditor  : Éditeur de texte.\nexit    : Fermer la session courante.\nfinger  : Affiche les informations sur l'utilisateur.\nhelp    : Affiche cette aide.\nopen    : Ouvrir un fichier.\npasswd  : Modifier son mot de passe.\nrm      : Supprimer un fichier.\nrhost   : Liste les postes du réseau.\nrusers  : Liste les utilisateurs du réseau.\nsu      : Changer d'utilisateur.\nwho     : Liste les utilisateurs connectés.\nwrite   : Envoyer un message à un utilisateur. " 24 84 3>&1 1>&2 2>&3
}

function rhost {
	sqlite3 ${databasefile} "SELECT hostname FROM hosts;"
}

function finger {
    infos=$(sqlite3 ${databasefile} "SELECT nom,prenom,courriel,telephone FROM users WHERE login='${user}';")
    nom=$(echo ${infos} | cut -d'|' -f1)
    prenom=$(echo ${infos} | cut -d'|' -f2)
    courriel=$(echo ${infos} | cut -d'|' -f3)
    telephone=$(echo ${infos} | cut -d'|' -f4)
    echo "Informations personnelles : "
    echo -e "Nom : \t\t ${nom}"
    echo -e "Prenom : \t ${prenom}"
    echo -e "Courriel : \t ${courriel}"
    echo -e "Telephone : \t ${telephone}"
}

function users_passwd {
    passwd=$(whiptail --passwordbox "Entrez le mot de passe actuel : " 8 78 --title "rvsh - Modification du mot de passe" 3>&1 1>&2 2>&3)
    hash=$(echo -n $passwd | sha512sum | awk '{ print $1 }')
    ctrl=$(sqlite3 ${databasefile} "SELECT passwd FROM users WHERE login='${user}';")
    if [[ $hash = $ctrl ]]
    then
    	passwd1=''
    	while [[ $passwd1 = '' ]]
    	do
    	    passwd1=$(whiptail --passwordbox "Entrez le nouveau mot de passe : " 8 78 --title "rvsh - Modification du mot de passe " 3>&1 1>&2 2>&3)
    	done
    	passwd2=''
    	while [[ $passwd2 = '' ]]
    	do
    	    passwd2=$(whiptail --passwordbox "Confirmez le nouveau mot de passe : " 8 78 --title "rvsh - Modification du mot de passe " 3>&1 1>&2 2>&3)
    	done
    	hash=$(echo -n ${passwd1} | sha512sum | awk '{ print $1 }')
    	sqlite3 ${databasefile} "UPDATE users SET passwd='${hash}' WHERE login='${user}';"
    	error_log 5 'passwd' "${user} - Mot de passe modifié avec succès. "
    else
	       error_log 3 'passwd' "${user} - Mot de passe incorrect. "
    fi
}

function host {
    case "$1" in
    	"-add"		| "-a"	) create_host;;
    	"-remove"	| "-r"	) delete_host;;
    	"-list"		| "-l"	) list_host;;
    	*			        ) help_host;;
    esac
}

function users {
    case "$1" in
    	"-add" 		| "-a"	) create_user;;
    	"-remove" 	| "-r"	) delete_user;;
    	"-list"		| "-l"	) list_user;;
    	"-grant"	| "-g"	) grant_user;;
    	*			        ) help_user;;
    esac
}

function afinger {
    nbusers=$(sqlite3 -column ${databasefile} "SELECT login FROM users;" | wc -l)
    users=$(sqlite3 -column ${databasefile} "SELECT login FROM users;" | sed -e 's/\(.*\)$/\1 \1 /g')
    user=$(whiptail --title "rvsh - Modification d'utilisateurs" --menu "Choisissez les comptes utilisateurs à modifier : " 20 78 ${nbusers} ${users} 3>&1 1>&2 2>&3)
    if [[ ${user} != '' ]]
    then
        dat=$(sqlite3 -column ${databasefile} "SELECT * FROM users WHERE login = '${user}';")
        nom=$(echo $dat | awk '{ print $2 }')
        nom_mod=$(whiptail --inputbox "Entrez le nom de l'utilisateur : " 8 78 $nom --title "rvsh - Modifier un compte utilisateur" 3>&1 1>&2 2>&3)
        prenom=$(echo $dat | awk '{ print $3 }')
        prenom_mod=$(whiptail --inputbox "Entrez le prénom de l'utilisateur : " 8 78 $prenom --title "rvsh - Modifier un compte utilisateur" 3>&1 1>&2 2>&3)
        courriel=$(echo $dat | awk '{ print $5 }')
        courriel_mod=$(whiptail --inputbox "Entrez le courriel de l'utilisateur : " 8 78 $courriel --title "rvsh - Modifier un compte utilisateur" 3>&1 1>&2 2>&3)
        telephone=$(echo $dat | awk '{ print $5 }')
        telephone_mod=$(whiptail --inputbox "Entrez le numéro de téléphone de l'utilisateur : " 8 78 $telephone --title "rvsh - Modifier un compte utilisateur" 3>&1 1>&2 2>&3)
        echo "Modification de l'utilisateur ${user}. "
        sqlite3 ${databasefile} "UPDATE users SET nom = '${nom_mod}', prenom = '${prenom_mod}', courriel = '${courriel_mod}', telephone = '${telephone_mod}' WHERE login = '${user}';"
    fi
}

function write {
    destuser=$(echo $1 | cut -d'@' -f1)
    desthost=$(echo $1 | cut -d'@' -f2)
    mes="${*:2}"
    for el in $(sqlite3 -column ${databasefile} "SELECT comport FROM activesh WHERE login='${destuser}' AND host='${host}';")
    do
	echo -e "Message de ${user}@${host} : \n\n${mes}" | nc localhost ${el}
    done
}

function easter {
    # Non, ce n'est pas sérieux ...
    squirrel=()
    squirrel[0]="         |\\=.   "
    squirrel[1]="         /  6', "
    squirrel[2]=" .--.    \\  .-' "
    squirrel[3]="/_   \\   /  (_()"
    squirrel[4]="  )   | / \`;--' "
    squirrel[5]=" /   / /   (    "
    squirrel[6]="(    \`\"    _)_  "
    squirrel[7]=" \`-==-'\`\"\"\"\"\"\"\` "
    phrases=("Le gras, c'est la vie !" "Fort heureusement, l'incident n'a fait aucune victime." "Arthour !… Couhillère !" "Arthour !… Pas changer assiette pour fromage !" "Arthour ! On est fort en pomme." "SALSIFIS !!!!!!" "J'suis chef de guerre moi, j'suis pas là pour agiter des drapeaux et jouer d'la trompette..." "Au gros sel ? Qu'est ce que c'est que ces conneries ? Vous me prenez pour une épaule d'agneau?" "Pour le transport, vaut mieux la brouette !" "Ah le printemps! La nature se réveille, les oiseaux reviennent, on crame des mecs." "J'bouff'rais un ch'val en salade !!!" "Y'a toujours au moins deux solutions à un problème." "Excusez moi Sire, c'est sur le coup du..."
    "Ou mettre du beurre dans le fond du plat pour pas que le gratin colle." "Y'a des méchants ?" "J'te présente vos hommages au roi Arthur." "Tatan, elle fait des flans." "Elle est où la poulette ?" "La joie de vivre et le jambon, y'a pas trente-six recettes du bonheur !" "Lorsqu'on le tient par la partie sporadique, ou boulière, le fenouil est un objet redondant. " "Ah bah c'est sûr qu'c'est pas Jo l'Rigolo." "Mais qu'est-ce que vous venez me gonfler avec votre père Blaise !" "J’ dis déjà pas merci dans ma langue, alors je vais pas l’apprendre en picte." "JE NE MANGE PAS DE GRAINES !" "Qu'est-ce qui est petit et marron ?" "Mais évidemment c'est sans alcool !" "Attendez, je veux être là quand vous lui mettez une chasse !" "C’est pas faux." "Sire, Sire ! On en a gros !"
    "C’est marrant les petits bouts de fromage par terre. C’est ça que vous appelez une fondue ?" "Après demain, à partir d'aujourd'hui ?" "C’qui compte, c’est les valeurs !" "Le code c'est \"le code\" ? Ça va, ils se sont pas trop cassés le bonnet, pour l'trouver celui-là !" "Une maquette ?! Vous avez pas dit qu'c'était une catapulte ?" "Qu'est-ce que vous voulez-vous insinuyer Sire ?" "Commencez pas à noyer la peau de l’ours avant d’avoir vendu le poisson." "Bohort il a une femme ! Vous pouvez me la refaire sans trembler des genoux celle-là ?" "Mais je vous empêche pas de faire la guerre, mais vous la ferez guéri !")

    authors=("Karadoc de Vannes" "Bohort de Gaunes" "Le roi burgonde" "Le roi burgonde" "Le roi burgonde" "Le roi burgonde" "Arthur, roi de Bretagne" "Arthur, roi de Bretagne" "Guethenoc" "Arthur, roi de Bretagne" "Arthur, roi de Bretagne" "Élias de Kelliwic’h" "Le Seigneur Jacca" "Kadoc" "Kadoc" "Kadoc" "Kadoc" "Kadoc" "Karadoc de Vannes" "Karadoc de Vannes" "Léodagan de Carmélide" "Léodagan de Carmélide" "Léodagan de Carmélide" "Le maître d'armes" "Merlin" "Merlin" "Merlin" "Perceval le Gallois" "Perceval le Gallois" "Perceval le Gallois" "Perceval le Gallois" "Perceval le Gallois" "Perceval le Gallois" "Perceval le Gallois" "Roparzh" "Roparzh" "Dame Séli" "Dame Ygerne")
    idx=$[($RANDOM % ($[${#phrases[@]}]))]
    phrase="« ${phrases[${idx}]} »"
    author="-- ${authors[${idx}]} --"
    termsize_cols=$(tput cols)
    termsize_lines=$(tput lines)
    marginv=$(( ((${termsize_lines}-14)/2) ))
    marginphr=$(( (${termsize_cols}-${#phrase})/2 ))
    marginaut=$(( (${termsize_cols}-${#author})/2 ))
    phrstr=""
    autstr=""
    c=0
    while [[ $c -lt $marginphr ]]
    do
        phrstr="${phrstr} "
        c=$((${c}+1))
    done
    c=0
    while [[ $c -lt $marginaut ]]
    do
        autstr="${autstr} "
        c=$((${c}+1))
    done
    phrstr="${phrstr}${phrase}"
    autstr="${autstr}${author}"
    c=0
    while [[ $c -lt 16 ]]
    do
        clear
        cpt=0
        while [[ $cpt -lt $marginv ]]
        do
            echo ""
            cpt=$((${cpt}+1))
        done
        idx=0
        while [[ $idx -lt 8 ]]
        do
            line="${squirrel[$idx]}"
            dsp="${line:$((16-$c)):$c}"
            echo "${dsp}"
            idx=$(($idx+1))
        done
        echo -e "\n\n${phrstr}\n${autstr}"
        sleep 0.05
        c=$((${c}+1))
    done
    while [[ $c -le $termsize_cols ]]
    do
        clear
        spa=""
        cpt=0
        while [[ $cpt -lt $marginv ]]
        do
            echo ""
            cpt=$((${cpt}+1))
        done
        cpt=0
        while [[ $cpt -lt $(($c-16)) ]]
        do
            spa="${spa} "
            cpt=$((${cpt}+1))
        done
        idx=0
        while [[ $idx -lt 8 ]]
        do
            line="${squirrel[$idx]}"
            dsp="${spa}${line}"
            echo "${dsp}"
            idx=$(($idx+1))
        done
        echo -e "\n\n${phrstr}\n${autstr}"
        sleep 0.05
        c=$((${c}+1))
    done
    while [[ $c -lt $(($termsize_cols+16)) ]]
    do
        clear
        spa=""
        cpt=0
        while [[ $cpt -lt $marginv ]]
        do
            echo ""
            cpt=$((${cpt}+1))
        done
        cpt=0
        while [[ $cpt -lt $(($c-16)) ]]
        do
            spa="${spa} "
            cpt=$((${cpt}+1))
        done
        idx=0
        while [[ $idx -lt 8 ]]
        do
            line="${squirrel[$idx]}"
            dsp="${spa}${line:0:$(($termsize_cols-$c))}"
            echo "${dsp}"
            idx=$(($idx+1))
        done
        echo -e "\n\n${phrstr}\n${autstr}"
        sleep 0.05
        c=$((${c}+1))
    done
    clear
}

function searchfile {
    string=$(whiptail --inputbox "Entrez les mots clés de votre recherche : " 8 78 $nom --title "rvsh - Recherche de fichiers" 3>&1 1>&2 2>&3)
    keywords=(${string})
    query="SELECT DISTINCT id_fic FROM keywords WHERE keyword IN ("
    c=0
    while [[ $c -lt ${#keywords[@]} ]]
    do
        keyword="${keywords[$c]}"
        query="${query}'${keyword}'"
        if [[ $c -ne $((${#keywords[@]}-1)) ]]
        then
            query="${query}, "
        fi
        c=$((${c}+1))
    done
    query="${query}) ;"
    id_fic_raw=$(sqlite3 -column ${databasefile} "${query}")
    id_fic=()
    whip=""
    for el in $id_fic_raw
    do
        owner=$(sqlite3 -column ${databasefile} "SELECT owner FROM files WHERE id='${el}'" | awk '{ print $1 }')
        if [[ ${user} = ${owner} ]]
        then
            id_fic=(${id_fic} ${el})
            fickey=$(sqlite3 ${databasefile} "SELECT keyword FROM keywords WHERE id_fic='${el}'" | sed -e 's/$/,/g' | tr -d "\n")
            whip="${whip} ${el} ${fickey}"
        fi
    done
    if [[ ${#id_fic[@]} -gt 0 ]]
    then
        selected=$(whiptail --title "rvsh - Recherche de fichiers" --menu "Choisissez le fichier : " 20 78 10 ${whip} 3>&1 1>&2 2>&3)
        if [[ ${1} = "open" ]]
        then
            editor ${selected}
        elif [[ ${1} = "rm" ]]
        then
            sqlite3 ${databasefile} "DELETE FROM files WHERE id='${selected}'"
            sqlite3 ${databasefile} "DELETE FROM keywords WHERE id_fic='${selected}'"
            echo "Nœud ${selected} supprimé. "
        elif [[ ${1} = "cp" ]]
        then
            id=$(sqlite3 -column ${databasefile} "SELECT t1.id+1 AS id FROM files t1 LEFT OUTER JOIN files t2 ON (t1.id + 1 = t2.id) WHERE t2.id IS NULL ORDER BY t1.id LIMIT 1;" | awk '{ print $1 }')
            content=$(sqlite3 -column ${databasefile} "INSERT INTO files (id,type,content,owner) SELECT ${id},type,content,owner FROM files WHERE id = ${selected}")
            for el in $(sqlite3 -column ${databasefile} "SELECT keyword FROM keywords WHERE id_fic=${selected}")
            do
                sqlite3 -column ${databasefile} "INSERT INTO keywords (id_fic,keyword) VALUES ('${id}','${el}')"
            done
            echo "Nœud ${selected} copié vers le nœud ${id}. "
        elif [[ ${1} = "chkey" ]]
        then
            sqlite3 ${databasefile} "DELETE FROM keywords WHERE id_fic='${selected}'"
            nkeywords=$(whiptail --inputbox "Entrez les mots clés associés à ce fichier séparés par un espace : " 8 78 --title "rvsh - Modification de mots clés" 3>&1 1>&2 2>&3)
        	for el in ${nkeywords}
        	do
                sqlite3 -column ${databasefile} "INSERT INTO keywords (id_fic,keyword) VALUES ('${selected}','${el}');"
        	done
            echo "Nœud ${selected} modifié. "
        fi
    else
        echo "Aucun fichier trouvé. " >&2
    fi
}

function editor {
    if [[ ${1} != '' && ${1} != 'editor' ]]
    then
        owner=$(sqlite3 -column ${databasefile} "SELECT owner FROM files WHERE id='${1}';" | awk '{ print $1 }')
    	if [[ ${user} = ${owner} ]]
    	then
            id=$1
    	    editor_core $id
    	else
    	    echo "Accès refusé. " >&2
    	fi
    else
    	id=$(sqlite3 -column ${databasefile} "SELECT t1.id+1 AS id FROM files t1 LEFT OUTER JOIN files t2 ON (t1.id + 1 = t2.id) WHERE t2.id IS NULL ORDER BY t1.id LIMIT 1;")
        if [[ ${id} = '' ]]
        then
            id=1
        fi
        echo $id
    	keywords=$(whiptail --inputbox "Entrez les mots clés associés à ce fichier séparés par un espace : " 8 78 --title "editor - Nouveau fichier" 3>&1 1>&2 2>&3)
    	sqlite3 -column ${databasefile} "INSERT INTO files (id,owner) VALUES ('${id}','${user}');"
    	for el in ${keywords}
    	do
            sqlite3 -column ${databasefile} "INSERT INTO keywords (id_fic,keyword) VALUES ('${id}','${el}');"
    	done
        editor_core $id
    fi
}

function editor_display {
    clear
    termsize_lines=$(tput lines)
    termsize_cols=$(tput cols)
    termsize_lines=$(($termsize_lines-3))
    termsize_cols_text=$(($termsize_cols-9))
    titre=" editor - Nœud ${id}"
    if [[ ${edited} -eq 1 ]]
    then
        titre="${titre}*"
    fi
    cpt=${#titre}
    while [[ ${cpt} -lt ${termsize_cols} ]]
    do
        titre="${titre} "
        cpt=$(($cpt+1))
    done
    echo -ne "\033[7m${titre}\033[0m"
    c=$(((${page}-1)*${termsize_lines}))
    end=$((${page}*${termsize_lines}))
    echo ""
    while [[ $c -lt $end ]]
    do
        nbligne=$(($c+1))
        nblignedisplay=""
        cpt=${#nbligne}
        while [[ ${cpt} -lt 7 ]]
        do
            nblignedisplay="${nblignedisplay} "
            cpt=$(($cpt+1))
        done
        nblignedisplay="${nblignedisplay}${nbligne} "
        if [[ " ${matcheslines[*]} " == *" ${c} "* ]]
        then
            echo -ne "\033[0;30;41m${nblignedisplay}\033[0m"
        else
            echo -ne "\033[0;36;44m${nblignedisplay}\033[0m"
        fi
        line=${data[$c]}
        echo -n ${line:0:termsize_cols_text}
        if [[ ${#line} -gt ${termsize_cols_text} ]]
        then
            echo -ne "\033[0;31m>\033[0m"
        fi
        echo ""
        c=$(($c+1))
    done
}

function editor_core {
    edited=0
    loop=1
    page=1
    matcheslines=()
    string=$(sqlite3 -column ${databasefile} "SELECT content FROM files WHERE id='${1}';")
    readarray -t data <<< "$string"
    prompt="Bienvenue sur editor !"
    ecmd=""
    while [[ ${loop} -eq 1 ]]
    do
        editor_display
        echo -e "\033[0;36m${prompt}\033[0m"
        echo -n ":"
        read ecmd
        case "$ecmd" in
            "q"* | "exit"*  ) editor_exit $ecmd;;
            "s"             ) editor_save;;
            "l"             ) editor_nextpage;;
            "j"             ) editor_prevpage;;
            "m"             ) editor_lastpage;;
            "h"             ) editor_firstpage;;
            "e"*            ) editor_editline $ecmd;;
            "i"*            ) editor_insertline $ecmd;;
            "d"*            ) editor_delline $ecmd;;
            "x"*            ) editor_moveline $ecmd;;
            "p"*            ) editor_copyline $ecmd;;
            "help" | "?"    ) editor_help;;
            "c"*            ) editor_lowercase $ecmd;;
            "C"*            ) editor_uppercase $ecmd;;
            "f"*            ) editor_search $ecmd;;
            *               ) prompt="Commande inconnue. Tapez 'help' pour afficher les commandes disponibles. ";;
        esac
    done
}

function editor_nextpage {
    page=$(($page+1))
}

function editor_lastpage {
    page=$((${#data[@]}/$termsize_lines+1))
}

function editor_firstpage {
    page=1
}

function editor_prevpage {
    page=$(($page-1))

    if [[ $page -lt 1 ]]
    then
        page=1
    fi
}

function editor_insertline {
    nextline=$((${#data[@]} + 1))
    linen=$(echo $1 | cut -c2-)
    if [[ $linen = '' ]]
    then
        editor_editline e${nextline}
    else
        lineidx=$(($linen-1))
        editor_autofocus ${lineidx}
        editor_display
        echo -e "\033[0;36mInsertion de la ligne ${linen}. \033[0m"
        read -e newline
        dataf=()
        c=0
        while [[ $c -lt $lineidx ]]
        do
            dataf[$c]=${data[c]}
            c=$(($c+1))
        done
        dataf[$lineidx]=${newline}
        c=$lineidx
        while [[ $c -lt ${#data[@]} ]]
        do
            cdat=$(($c+1))
            dataf[$cdat]=${data[c]}
            c=$(($c+1))
        done
        IFS=$'\n' data=(${dataf[@]})
    fi
    edited=1
}

function editor_moveline {
    linen=$(echo $1 | cut -c2-)
    linecut=$(echo $linen | cut -d, -f1)
    linepaste=$(echo $linen | cut -d, -f2)
    linecut=$(($linecut-1))
    movedline=${data[linecut]}
    dataf=()
    c=0
    while [[ $c -lt $linepaste ]]
    do
        if [[ $c -ne $linecut ]]
        then
            dataf[$c]=${data[c]}
        fi
        c=$(($c+1))
    done
    dataf[$linepaste]=${movedline}
    c=$linepaste
    while [[ $c -lt ${#data[@]} ]]
    do
        cdat=$(($c+1))
        if [[ $c -ne $linecut ]]
        then
            dataf[$cdat]=${data[c]}
        fi
        c=$(($c+1))
    done
    IFS=$'\n' data=(${dataf[@]})
    editor_autofocus ${linepaste}
    prompt="Ligne $(($linecut+1)) déplacée."
    edited=1
}

function editor_copyline {
    linen=$(echo $1 | cut -c2-)
    linecopy=$(echo $linen | cut -d, -f1)
    linepaste=$(echo $linen | cut -d, -f2)
    linecopy=$(($linecopy-1))
    linepaste=$(($linepaste-1))
    copiedline=${data[linecopy]}
    dataf=()
    c=0
    while [[ $c -lt $linepaste ]]
    do
        dataf[$c]=${data[c]}
        c=$(($c+1))
    done
    dataf[$linepaste]=${copiedline}
    c=$linepaste
    while [[ $c -lt ${#data[@]} ]]
    do
        cdat=$(($c+1))
        dataf[$cdat]=${data[c]}
        c=$(($c+1))
    done
    IFS=$'\n' data=(${dataf[@]})
    editor_autofocus ${linepaste}
    prompt="Ligne $(($linecopy+1)) copiée."
    edited=1
}

function editor_editline {
    linen=$(echo $1 | cut -c2-)
    lineidx=$(($linen-1))
    editor_display
    echo -e "\033[0;36mÉdition de la ligne ${linen}. \033[0m"
    read -i "${data[lineidx]}" -e newline
    data[$lineidx]=${newline}
    editor_autofocus ${lineidx}
    prompt="Ligne ${linen} éditée. "
    edited=1
}

function editor_delline {
    linen=$(echo $1 | cut -c2-)
    lineidx=$(($linen-1))
    unset data[lineidx]
    IFS=$'\n' data=(${data[@]})
    editor_autofocus ${lineidx}
    prompt="Ligne ${linen} supprimée. "
    edited=1
}

function editor_save {
    content=""
    c=0
    end=${#data[@]}
    while [[ $c -lt $end ]]
    do
        linesave=${data[$c]}
        content="${content}${linesave}\n"
        c=$(($c+1))
    done
    echo -e "UPDATE files SET content='${content}' WHERE id='${id}';" | sqlite3 ${databasefile}
    edited=0
    prompt="Fichier sauvegardé"
}

function editor_exit {
    if [[ $edited -eq 1 ]]
    then
        valid=0
        while [[ $valid -eq 0 ]]
        do
            editor_display
            echo -e "\033[0;36mSouhaitez-vous enregistrer les modifications du fichier (O/N) ? \033[0m"
            read rep
            if [[ $rep = "o" || $rep = "O" ]]
            then
                editor_save
                valid=1
            elif [[ $rep = "n" || $rep = "N" ]]
            then
                valid=1
            fi
        done
    fi
    loop=0
}

function editor_autofocus {
    page=$((${1}/${termsize_lines}+1))
}

function editor_uppercase {
    linen=$(echo $1 | cut -c2-)
    lineidx=$(($linen-1))
    data[$lineidx]=${data[lineidx]^^}
    editor_autofocus ${lineidx}
    prompt="Casse de la ligne ${linen} modifiée. "
    edited=1
}

function editor_lowercase {
    linen=$(echo $1 | cut -c2-)
    lineidx=$(($linen-1))
    data[$lineidx]=${data[lineidx],,}
    editor_autofocus ${lineidx}
    prompt="Casse de la ligne ${linen} modifiée. "
    edited=1
}

function editor_search {
    pattern=$(echo $1 | cut -c2-)
    nbmatch=0
    matcheslines=()
    c=0
    searchprompt="${nbmatch} résultats trouvés. "
    while [[ $c -lt ${#data[@]} ]]
    do
        if [[ ${data[c],,} =~ ${pattern,,} ]]
        then
            nbmatch=$((${nbmatch}+1))
            matcheslines=("${matcheslines[@]}" "${c}")
        fi
        c=$((${c}+1))
    done
    if [[ ${nbmatch} -gt 0 ]]
    then
        scmd=""
        while [[ ${scmd} != "q" ]]
        do
            editor_display
            echo -e "\033[0;36m${searchprompt}\033[0m"
            echo -n "f:"
            read scmd
            case "$scmd" in
                "r"*    ) editor_replace $scmd ;;
                "l"     ) editor_nextpage;;
                "j"     ) editor_prevpage;;
                "m"     ) editor_lastpage;;
                "h"     ) editor_firstpage;;
                *       ) searchprompt="Commande inconnue";;
            esac
        done
        prompt="Recherche terminée. "
    else
        prompt="Aucun résultat trouvé. "
    fi
    matcheslines=()
}

function editor_replace {
    linen=$(echo $1 | cut -c2- | cut -d, -f1)
    replace=$(echo $1 | cut -c2- | cut -d, -f2)
    lineidx=$(($linen-1))
    data[$lineidx]=$(echo ${data[lineidx]} | sed -e "s/${pattern}/${replace}/g")
    searchprompt="Ligne ${linen} modifiée. "
    edited=1
}

function editor_help {
    whiptail --title "rvsh - Aide" --ok-button "Fermer" --msgbox "Aide pour la commande editor\n\nhelp            : Affiche cette aide.\nl               : Page suivante.\nj               : Page précédente.\nm               : Première page.\nh               : Dernière page.\nc<LINE>         : Passe la ligne LINE en minuscules.\nC<LINE>         : Passe la ligne LINE en majuscules.\nd<LINE>         : Supprimer la ligne LINE.\ne<LINE>         : Éditer la ligne LINE.\nf<TEXT>         : Recherche dans le document TEXT.\ni<LINE>         : Insérer une ligne <LINE> (par défaut : fin de fichier).\np<SRC>,<DST>    : Copie la ligne SRC vers la ligne DST (insertion).\nq               : Quitter.\ns               : Enregistrer le fichier.\nx<SRC>,<DST>    : Déplace la ligne SRC vers la ligne DST. " 23 84 3>&1 1>&2 2>&3
}

if [ ! -f ${databasefile} ]
then
    create_database
fi

case "$1" in
    "-connect"	) connect $2 $3;;
    "-admin"	) admin;;
    *		    ) help;;
esac

exit 0
