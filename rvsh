#!/bin/bash
#
# The MIT License (MIT)
#
# Copyright (c) 2015 Halouoi Hamza <halouoi.hamza@utt.fr>, Antoine Pernot <antoine.pernot@utt.fr>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

# +------------------------------------------------------+
# | ATTENTION : Ce script nécessite le programme sqlite3 |
# +------------------------------------------------------+

# La section ci-dessous pourra être supprimée si le présent programme est distribué sous la forme d'un paquet Debian avec comme fichier DEBIAN/control :
#
# ----- DEBUT DE FICHIER DEBIAN/control -----
# Package: rvsh
# Version: 1.0
# Section: system
# Priority: optional
# Architecture: all
# Depends: sqlite3
# Maintainer: Halouoi Hamza <halouoi.hamza@utt.fr>, Antoine Pernot <antoine.pernot@utt.fr>
# Description: Shell de réseau virtuel
# -----  FIN DE FICHIER DEBIAN/control  -----

# ----- DEBUT DE SECTION -----
function install_sqlite {
    echo "rvsh dépends de sqlite3. Nous allons l'installer …"
    sudo apt-get -y install sqlite3
}

dpkg -s sqlite3 2>/dev/null >/dev/null || install_sqlite
# -----  FIN DE SECTION  -----

function help {
    whiptail --title "rvsh - Aide" --ok-button "Fermer" --msgbox "Aide pour la commande rvsh\n\n–connect <HOST> <USER> : Se connecter à la machine HOST avec l'utilisateur USER.\n–admin                 : Gestion des machines connectées au réseau virtuel et la liste des utilisateurs." 11 84 3>&1 1>&2 2>&3
}

databasefile='database.db'

declare -a user_stack
declare -a host_stack
declare -a logintime_stack
declare -a compid_stack

function error_log {
    level=$1
    datetime=$(date +%s)
    program=$2
    msg=$3
    sqlite3 ${databasefile} "INSERT INTO syslog (host,level,datetime,program,msg) VALUES ('${host}','${level}','${datetime}','${program}','${msg}');"

    if [[ ${level} -le 4 ]]
    then
	   echo ${msg} >&2
    else
	       echo ${msg}
    fi
}

function admin {
    passwd=$(whiptail --passwordbox "Entrez le mot de passe de connexion : " 8 78 --title "rvsh - Connexion au mode administrateur" 3>&1 1>&2 2>&3)
    hash=$(echo -n $passwd | sha512sum | awk '{ print $1 }')
    ctrl=$(sqlite3 ${databasefile} "SELECT value FROM config WHERE key = 'admin_passwd';")
    if [[ $hash = $ctrl ]]
    then
    	cmd=''
    	hist=''
    	while [[ $cmd != 'exit' ]]
    	do
    	    echo -n "rvsh > "
    	    read cmd
    	    if [[ $cmd != '!!' ]]
    	    then
    		      hist=${cmd}
    	    else
        		cmd=${hist}
        		echo $cmd
    	    fi
    	    com=`echo ${cmd} | cut -d' ' -f1`
    	    param=`echo ${cmd} | cut -d' ' -f2-`
    	    case "$com" in
    		"exit"		) echo "Déconnexion";;
    		"host"		) host $param;;
    		"users"		) users $param;;
    		"clear"		) clear;;
    		"afinger"	) afinger $param;;
    		"passwd"	) admin_passwd;;
    		"rhost"		) rhost;;
    		"connect"	) connect $param;;
    		"su"		) connect $host $param;;
    		"who"		) who;;
    		"rusers"	) rusers;;
    		"write"		) write $param;;
    		*	    	) echo "Commande inconnue. " >&2
    	    esac
    	done
    else
	       error_log 3 'admin-connect' "Mot de passe incorrect. "
    fi
}

function admin_help {
    whiptail --title "rvsh - Aide" --ok-button "Fermer" --msgbox "Commandes disponibles au mode admin\n\nhost    : Gestion des postes du réseau. \nusers   : Gestion des utilisateurs du réseau. \nafinger : Renseigne les informations complémentaires sur l'utilisateur. \n\n-h      : Afficher l'aide de la commande" 11 84 3>&1 1>&2 2>&3
}

function create_database {
    echo "Base de données abscente, création de la base '${databasefile}'. " >&2
    sqlite3 ${databasefile} "CREATE TABLE users (login TEXT PRIMARY KEY, nom TEXT, prenom TEXT, passwd TEXT, courriel TEXT, telephone CHAR(10));"
    sqlite3 ${databasefile} "CREATE TABLE hosts (hostname TEXT PRIMARY KEY);"
    sqlite3 ${databasefile} "CREATE TABLE grants (login TEXT, hostname TEXT, FOREIGN KEY(login) REFERENCES users(login), FOREIGN KEY(hostname) REFERENCES hosts(hostname));"
    sqlite3 ${databasefile} "CREATE TABLE config (key TEXT PRIMARY KEY, value TEXT);"
    sqlite3 ${databasefile} "CREATE TABLE authlog (id INTEGER PRIMARY KEY AUTOINCREMENT, login TEXT, hostname TEXT, login_timestamp INTEGER, logout_timestamp INTEGER, FOREIGN KEY(login) REFERENCES users(login), FOREIGN KEY(hostname) REFERENCES hosts(hostname));"
    sqlite3 ${databasefile} "CREATE TABLE syslog (id INTEGER PRIMARY KEY AUTOINCREMENT, host TEXT, level INTEGER, datetime INTEGER, program TEXT, msg TEXT, FOREIGN KEY(host) REFERENCES hosts(hostname));"
    sqlite3 ${databasefile} "CREATE TABLE activesh (id INTEGER PRIMARY KEY AUTOINCREMENT, pid INTEGER, login TEXT, host TEXT, logintime INTEGER, comport INTEGER, compid INTEGER, FOREIGN KEY(login) REFERENCES users(login), FOREIGN KEY(host) REFERENCES hosts(hostname));"

    # Définition du mot de passe d'administration. Ici, le mot de passe par défaut est 'AdaLovelace'.
    sqlite3 ${databasefile} "INSERT INTO config (key, value) VALUES ('admin_passwd','c6fad173ccc1d73c9b416a51295e1cc322fbc4141d5f5658e1148e6be18b53d1b434420ba2df7980aa3bf37c7b2339f46af07e30ad814c282c617175f5b98abd');"

    sqlite3 ${databasefile} "CREATE TABLE files (id INTEGER PRIMARY KEY AUTOINCREMENT, type TEXT DEFAULT 'text', owner TEXT, content BLOB, FOREIGN KEY(owner) REFERENCES users(login));"
    sqlite3 ${databasefile} "CREATE TABLE keywords (id_fic INTEGER, keyword TEXT, FOREIGN KEY(id_fic) REFERENCES files(id));"
}

function create_host {
    hostname=''
    while [[ $hostname = '' ]]
    do
	       hostname=$(whiptail --inputbox "Entrez le nom de la machine (hostname) : " 8 78 --title "rvsh - Créer une machine virtuelle" 3>&1 1>&2 2>&3)
    done
    sqlite3 ${databasefile} "INSERT INTO hosts (hostname) VALUES ('${hostname}');"
}

function delete_host {
    nbhosts=$(sqlite3 -column ${databasefile} "SELECT hostname FROM hosts;" | wc -l)
    hosts=$(sqlite3 -column ${databasefile} "SELECT hostname FROM hosts;" | sed -e 's/\(.*\)$/\1 \1 OFF/g')
    if [[ $nbhosts -gt 0 ]]
    then
    	host=$(whiptail --title "rvsh - Suppession de machines virtuelles" --checklist "Choisissez les postes à supprimer : " 20 78 ${nbhosts} ${hosts} 3>&1 1>&2 2>&3)
    	for el in ${host}
    	do
    	    echo "Suppession du poste ${el}. "
    	    sqlite3 ${databasefile} "DELETE FROM hosts WHERE hostname = ${el};"
    	    sqlite3 ${databasefile} "DELETE FROM grants WHERE hostname = ${el};"
    	done
    else
	       echo "Aucun poste enregistré sur le réseau. " >&2
    fi
}

function list_host {
    sqlite3 ${databasefile} "SELECT hostname FROM hosts;"
}

function help_host {
    whiptail --title "rvsh - Aide" --ok-button "Fermer" --msgbox "Aide pour la commande host\n\n–add    | –a : Ajoute une machine au réseau. \n–remove | –r : Supprime une machine du réseau. \n–list   | –l : Liste les machines du réseau. " 11 84 3>&1 1>&2 2>&3
}

function create_user {
    nom=$(whiptail --inputbox "Entrez le nom de l'utilisateur : " 8 78 --title "rvsh - Créer un compte utilisateur" 3>&1 1>&2 2>&3)
    prenom=$(whiptail --inputbox "Entrez le prénom de l'utilisateur : " 8 78 --title "rvsh - Créer un compte utilisateur" 3>&1 1>&2 2>&3)
    login=''
    while [[ $login = '' ]]
    do
    	login=$(echo "`echo -n "${nom}" | tr 'A-Z' 'a-z' | cut -c 1-8``echo -n "${prenom}" | tr 'A-Z' 'a-z' | cut -c 1-2`")
    	login=$(whiptail --inputbox "Entrez l'identifiant de l'utilisateur (login) : " 8 78 ${login} --title "rvsh - Créer un compte utilisateur" 3>&1 1>&2 2>&3)
    done
    passwd1='a'
    passwd1='b'
    while [[ $passwd1 != $passwd2 ]]
    do
    	passwd1=''
    	while [[ $passwd1 = '' ]]
    	do
    	    passwd1=$(whiptail --passwordbox "Entrez le mot de passe (passwd) : " 8 78 --title "rvsh - Créer un compte utilisateur" 3>&1 1>&2 2>&3)
    	done
    	passwd2=''
    	while [[ $passwd2 = '' ]]
    	do
    	    passwd2=$(whiptail --passwordbox "Confirmez le mot de passe (passwd) : " 8 78 --title "rvsh - Créer un compte utilisateur" 3>&1 1>&2 2>&3)
    	done
    done
    hash=$(echo -n ${passwd1} | sha512sum | awk '{ print $1 }')
    sqlite3 ${databasefile} "INSERT INTO users (login, nom, prenom, passwd) VALUES ('${login}','${nom}','${prenom}','${hash}');"
}

function delete_user {
    nbuser=$(sqlite3 -column ${databasefile} "SELECT login FROM users;" | wc -l)
    users=$(sqlite3 -column ${databasefile} "SELECT login FROM users;" | sed -e 's/\(.*\)$/\1 \1 OFF/g')
    if [[ $nbuser -gt 0 ]]
    then
    	user=$(whiptail --title "rvsh - Suppession d'utilisateurs" --checklist "Choisissez les comptes utilisateurs à supprimer : " 20 78 ${nbuser} ${users} 3>&1 1>&2 2>&3)
    	for el in ${user}
    	do
    	    echo "Suppession de l'utilisateur ${el}. "
    	    sqlite3 ${databasefile} "DELETE FROM users WHERE login = ${el};"
    	    sqlite3 ${databasefile} "DELETE FROM grants WHERE login = ${el};"
    	done
    else
	    echo "Aucun utilisateur enregistré sur le réseau. " >&2
    fi
}


function list_user {
    sqlite3 ${databasefile} "SELECT login,nom,prenom FROM users;"
}

function grant_user {
    nbuser=$(sqlite3 -column ${databasefile} "SELECT login FROM users;" | wc -l)
    users=$(sqlite3 -column ${databasefile} "SELECT login FROM users;" | sed -e 's/\(.*\)$/\1 \1/g')
    if [[ $nbuser -gt 0 ]]
    then
	user=$(whiptail --title "rvsh - Gestion des droits d'accès" --menu "Choisissez le compte utilisateur à gérer : " 20 78 ${nbuser} ${users} 3>&1 1>&2 2>&3)
	nbhosts=$(sqlite3 -column ${databasefile} "SELECT hostname FROM hosts;" | wc -l)
	hosts=$(sqlite3 -column ${databasefile} "SELECT hostname FROM hosts;")
	if [[ $nbhosts -gt 0 ]]
	then
	    listhost=''
	    for el in ${hosts}
	    do
    		if [[ $(sqlite3 -column ${databasefile} "SELECT * FROM grants WHERE login = '${user}' AND hostname = '${el}';") ]]
    		then
    		    listhost="$listhost $el $el ON"
    		else
    		    listhost="$listhost $el $el OFF"
    		fi
	    done
	    host=$(whiptail --title "rvsh - Gestion des droits d'accès" --checklist "Choisissez les postes autorisés pour l'utilisateur ${user} : " 20 78 ${nbhosts} ${listhost} 3>&1 1>&2 2>&3)
	    sqlite3 ${databasefile} "DELETE FROM grants WHERE login = '${user}';"
	    for el in ${host}
	    do
		    sqlite3 ${databasefile} "INSERT INTO grants (login,hostname) VALUES ('${user}',${el});"
	    done
	else
	    echo "Aucun poste enregistré sur le réseau. " >&2
	fi
    else
	echo "Aucun utilisateur enregistré sur le réseau. " >&2
    fi
}

function help_user {
    whiptail --title "rvsh - Aide" --ok-button "Fermer" --msgbox "Aide pour la commande users\n\n–add    | –a : Ajoute un utilisateur. \n–remove | –r : Supprime un utilisateur. \n–list   | –l : Liste les utiliateurs. \n–grant  | –g : Gestion des droits d'accès des utiliateurs. " 12 84 3>&1 1>&2 2>&3
}

function admin_passwd {
    passwd=$(whiptail --passwordbox "Entrez le mot de passe actuel : " 8 78 --title "rvsh - Modification du mot de passe administrateur" 3>&1 1>&2 2>&3)
    hash=$(echo -n $passwd | sha512sum | awk '{ print $1 }')
    ctrl=$(sqlite3 ${databasefile} "SELECT value FROM config WHERE key = 'admin_passwd';")
    if [[ $hash = $ctrl ]]
    then
    	passwd1=''
    	while [[ $passwd1 = '' ]]
    	do
    	    passwd1=$(whiptail --passwordbox "Entrez le nouveau mot de passe : " 8 78 --title "rvsh - Modification du mot de passe administrateur" 3>&1 1>&2 2>&3)
    	done
    	passwd2=''
    	while [[ $passwd2 = '' ]]
    	do
    	    passwd2=$(whiptail --passwordbox "Confirmez le nouveau mot de passe : " 8 78 --title "rvsh - Modification du mot de passe administrateur" 3>&1 1>&2 2>&3)
    	done
    	hash=$(echo -n ${passwd1} | sha512sum | awk '{ print $1 }')
    	sqlite3 ${databasefile} "UPDATE config SET value='${hash}' WHERE key = 'admin_passwd';"
    	error_log 5 'admin-passwd' "Mot de passe modifié avec succès. "
    else
	       error_log 3 'admin-passwd' "Mot de passe incorrect. "
    fi
}

function who {
    rep=$(sqlite3 ${databasefile} "SELECT login,login_timestamp FROM authlog WHERE hostname = '${host}' AND logout_timestamp IS NULL ;")
    out="Utilisateur\tDate de connexion\n"
    for el in ${rep}
    do
    	login=$(echo ${el} | cut -d'|' -f1 )
    	timestamp=$(echo ${el} | cut -d'|' -f2 )
    	date=$(date --date="@${timestamp}")
    	out=${out}"${login}\t${date}\n"
    done
    echo -e $out | column -t -s $'\t'
}

function rusers {
    rep=$(sqlite3 ${databasefile} "SELECT login,hostname,login_timestamp FROM authlog WHERE logout_timestamp IS NULL ;")
    out="Utilisateur\tPoste\tDate de connexion\n"
    for el in ${rep}
    do
    	login=$(echo ${el} | cut -d'|' -f1 )
    	hostname=$(echo ${el} | cut -d'|' -f2 )
    	timestamp=$(echo ${el} | cut -d'|' -f3 )
    	date=$(date --date="@${timestamp}")
    	out=${out}"${login}\t${hostname}\t${date}\n"
    done
    echo -e $out | column -t -s $'\t'
}

function connect {
    host_stack=(${host_stack[@]} $1)
    user_stack=(${user_stack[@]} $2)
    logintime_stack=(${logintime_stack[@]} $(date +%s))
    host=$1
    user=$2
    nc -dkl -p $((10000 + ${#host_stack[@]} + $$)) &
    sqlite3 ${databasefile} "INSERT INTO activesh (pid,login,host,logintime,compid,comport) VALUES ('$$','${user}','${host}','$(date +%s)','$!','$((10000 + ${#host_stack[@]} + $$))');"
    compid_stack=(${compid_stack[@]} $!)
    if [[ $(sqlite3 -column ${databasefile} "SELECT * FROM grants WHERE login = '${user}' AND hostname = '${host}';") ]]
    then
    	passwd=$(whiptail --passwordbox "Entrez le mot de passe de connexion : " 8 78 --title "rvsh - Connexion au réseau" 3>&1 1>&2 2>&3)
    	hash=$(echo -n $passwd | sha512sum | awk '{ print $1 }')
    	ctrl=$(sqlite3 ${databasefile} "SELECT passwd FROM users WHERE login = '${user}';")
    	if [[ $hash = $ctrl ]]
    	then
    	    timestamp=${logintime_stack[${#logintime_stack[@]}-1]}
    	    sqlite3 ${databasefile} "INSERT INTO authlog (login,hostname,login_timestamp) VALUES ('${user}','${host}','${timestamp}');"
    	    cmd=''
    	    hist=''
    	    while [[ $cmd != 'exit' ]]
    	    do
        		echo -n "${user}@${host} > "
        		read cmd
        		if [[ $cmd != '!!' ]]
        		then
        		    hist=${cmd}
        		else
        		    cmd=${hist}
        		    echo $cmd
        		fi
        		com=`echo ${cmd} | cut -d' ' -f1`
        		param=`echo ${cmd} | cut -d' ' -f2-`
        		case "$com" in
        		    "exit"	    ) echo "Déconnexion";;
        		    "rhost"	    ) rhost;;
        		    "rusers"	) rusers;;
        		    "passwd"	) users_passwd;;
        		    "connect"	) connect $param;;
        		    "su"	    ) connect $host $param;;
        		    "who"	    ) who;;
        		    "write"	    ) write $param;;
                    "editor"    ) editor $param;;
        		    *		    ) echo "Commande inconnue. " >&2;;
        		esac
    	    done
    	else
    	    error_log 3 'connect' "${user}@${host} - Connexion refusée : mot de passe incorrect. "
    	fi
    else
	       error_log 3 'connect' "${user}@${host} - Connexion refusée : permission non accordée. "
    fi
    timestamp=$(date +%s)
    login_timestamp=${logintime_stack[${#logintime_stack[@]}-1]}
    sqlite3 ${databasefile} "UPDATE authlog SET logout_timestamp='${timestamp}' WHERE login_timestamp='${login_timestamp}' AND login='${user}' AND hostname='${host}';"
    kill -9 ${compid_stack[${#compid_stack[@]}-1]}
    wait ${compid_stack[${#compid_stack[@]}-1]} 2>/dev/null
    unset compid_stack[${#compid_stack[@]}-1]
    activeshid=$(sqlite3 ${databasefile} "SELECT id FROM activesh WHERE login='${user}' AND host='${host}' AND pid='$$' ORDER BY id DESC LIMIT 1;")
    sqlite3 ${databasefile} "DELETE FROM activesh WHERE id='${activeshid}';"
    if [[ ${#host_stack[@]} -gt 1 ]]
    then
        cmd=''
    	unset host_stack[${#host_stack[@]}-1]
    	unset user_stack[${#user_stack[@]}-1]
    	unset logintime_stack[${#logintime_stack[@]}-1]
    	host=${host_stack[${#host_stack[@]}-1]}
    	user=${user_stack[${#user_stack[@]}-1]}
    fi
}

function rhost {
	sqlite3 ${databasefile} "SELECT hostname FROM hosts;"
}

function users_passwd {
    passwd=$(whiptail --passwordbox "Entrez le mot de passe actuel : " 8 78 --title "rvsh - Modification du mot de passe" 3>&1 1>&2 2>&3)
    hash=$(echo -n $passwd | sha512sum | awk '{ print $1 }')
    ctrl=$(sqlite3 ${databasefile} "SELECT passwd FROM users WHERE login='${user}';")
    if [[ $hash = $ctrl ]]
    then
	passwd1=''
	while [[ $passwd1 = '' ]]
	do
	    passwd1=$(whiptail --passwordbox "Entrez le nouveau mot de passe : " 8 78 --title "rvsh - Modification du mot de passe " 3>&1 1>&2 2>&3)
	done
	passwd2=''
	while [[ $passwd2 = '' ]]
	do
	    passwd2=$(whiptail --passwordbox "Confirmez le nouveau mot de passe : " 8 78 --title "rvsh - Modification du mot de passe " 3>&1 1>&2 2>&3)
	done
	hash=$(echo -n ${passwd1} | sha512sum | awk '{ print $1 }')
	sqlite3 ${databasefile} "UPDATE users SET passwd='${hash} WHERE login=${user}';"
	error_log 5 'passwd' "${user} - Mot de passe modifié avec succès. "
    else
	error_log 3 'passwd' "${user} - Mot de passe incorrect. "
    fi
}

function host {
    case "$1" in
	"-add"		| "-a"	) create_host;;
	"-remove"	| "-r"	) delete_host;;
	"-list"		| "-l"	) list_host;;
	*			) help_host;;
    esac
}

function users {
    case "$1" in
	"-add" 		| "-a"	) create_user;;
	"-remove" 	| "-r"	) delete_user;;
	"-list"		| "-l"	) list_user;;
	"-grant"	| "-g"	) grant_user;;
	*			) help_user;;
    esac
}

function afinger {
    nbusers=$(sqlite3 -column ${databasefile} "SELECT login FROM users;" | wc -l)
    users=$(sqlite3 -column ${databasefile} "SELECT login FROM users;" | sed -e 's/\(.*\)$/\1 \1 /g')
    user=$(whiptail --title "rvsh - Modification d'utilisateurs" --menu "Choisissez les comptes utilisateurs à modifier : " 20 78 ${nbusers} ${users} 3>&1 1>&2 2>&3)
    dat=$(sqlite3 -column ${databasefile} "SELECT * FROM users WHERE login = '${user}';")
    nom=$(echo $dat | awk '{ print $2 }')
    nom_mod=$(whiptail --inputbox "Entrez le nom de l'utilisateur : " 8 78 $nom --title "rvsh - Modifier un compte utilisateur" 3>&1 1>&2 2>&3)
    prenom=$(echo $dat | awk '{ print $3 }')
    prenom_mod=$(whiptail --inputbox "Entrez le prénom de l'utilisateur : " 8 78 $prenom --title "rvsh - Modifier un compte utilisateur" 3>&1 1>&2 2>&3)
    courriel=$(echo $dat | awk '{ print $5 }')
    courriel_mod=$(whiptail --inputbox "Entrez le courriel de l'utilisateur : " 8 78 $courriel --title "rvsh - Modifier un compte utilisateur" 3>&1 1>&2 2>&3)
    telephone=$(echo $dat | awk '{ print $5 }')
    telephone_mod=$(whiptail --inputbox "Entrez le numéro de téléphone de l'utilisateur : " 8 78 $telephone --title "rvsh - Modifier un compte utilisateur" 3>&1 1>&2 2>&3)
    echo "Modification de l'utilisateur ${user}. "
    sqlite3 ${databasefile} "UPDATE users SET nom = '${nom_mod}', prenom = '${prenom_mod}', courriel = '${courriel_mod}', telephone = '${telephone_mod}' WHERE login = '${user}';"
}

function write {
    destuser=$(echo $1 | cut -d'@' -f1)
    desthost=$(echo $1 | cut -d'@' -f2)
    mes="${*:2}"
    for el in $(sqlite3 -column ${databasefile} "SELECT comport FROM activesh WHERE login='${destuser}' AND host='${host}';")
    do
	echo -e "Message de ${user}@${host} : \n\n${mes}" | nc localhost ${el}
    done
}

function editor {
    if [[ ${1} != '' && ${1} != 'editor' ]]
    then
        owner=$(sqlite3 -column ${databasefile} "SELECT owner FROM files WHERE id='${1}';" | awk '{ print $1 }')
    	if [[ ${user} = ${owner} ]]
    	then
            id=$1
    	    editor_core $id
    	else
    	    echo "Accès refusé. " >&2
    	fi
    else
    	id=$(sqlite3 -column ${databasefile} "SELECT t1.id+1 AS id FROM files t1 LEFT OUTER JOIN files t2 ON (t1.id + 1 = t2.id) WHERE t2.id IS NULL ORDER BY t1.id LIMIT 1;")
        if [[ ${id} = '' ]]
        then
            id=1
        fi
        echo $id
    	keywords=$(whiptail --inputbox "Entrez les mots clés associés à ce fichier séparés par un espace : " 8 78 --title "editor - Nouveau fichier" 3>&1 1>&2 2>&3)
    	sqlite3 -column ${databasefile} "INSERT INTO files (id,owner) VALUES ('${id}','${user}');"
    	for el in ${keywords}
    	do
            sqlite3 -column ${databasefile} "INSERT INTO keywords (id_fic,keyword) VALUES ('${id}','${el}');"
    	done
        editor_core $id
    fi
}

function editor_display {
    clear
    termsize_lines=$(tput lines)
    termsize_cols=$(tput cols)
    termsize_lines=$(($termsize_lines-3))
    termsize_cols_text=$(($termsize_cols-9))
    titre=" editor - Nœud ${id}"
    if [[ ${edited} -eq 1 ]]
    then
        titre="${titre}*"
    fi
    cpt=${#titre}
    while [[ ${cpt} -lt ${termsize_cols} ]]
    do
        titre="${titre} "
        cpt=$(($cpt+1))
    done
    echo -ne "\033[7m${titre}\033[0m"
    c=$(((${page}-1)*${termsize_lines}))
    end=$((${page}*${termsize_lines}))
    echo ""
    while [[ $c -lt $end ]]
    do
        nbligne=$(($c+1))
        nblignedisplay=""
        cpt=${#nbligne}
        while [[ ${cpt} -lt 7 ]]
        do
            nblignedisplay="${nblignedisplay} "
            cpt=$(($cpt+1))
        done
        nblignedisplay="${nblignedisplay}${nbligne} "
        echo -ne "\033[0;36;44m${nblignedisplay}\033[0m"
        line=${data[$c]}
        echo -n ${line:0:termsize_cols_text}
        if [[ ${#line} -gt ${termsize_cols_text} ]]
        then
            echo -ne "\033[0;31m>\033[0m"
        fi
        echo ""
        c=$(($c+1))
    done
}

function editor_core {
    edited=0
    loop=1
    page=1
    string=$(sqlite3 -column ${databasefile} "SELECT content FROM files WHERE id='${1}';")
    readarray -t data <<< "$string"
    prompt="Bienvenue sur editor !"
    ecmd=""
    while [[ ${loop} -eq 1 ]]
    do
        editor_display
        echo -e "\033[0;36m${prompt}\033[0m"
        echo -n ":"
        read ecmd
        case "$ecmd" in
            "q" | "exit"    ) editor_exit;;
            "s"             ) editor_save;;
            "l"             ) editor_nextpage;;
            "j"             ) editor_prevpage;;
            "m"             ) editor_lastpage;;
            "h"             ) editor_firstpage;;
            "e"*            ) editor_editline $ecmd;;
            "i"*            ) editor_insertline $ecmd;;
            "d"*            ) editor_delline $ecmd;;
            *               ) prompt="Commande inconnue. ";;
        esac
    done
}

function editor_nextpage {
    page=$(($page+1))
}

function editor_lastpage {
    page=$((${#data[@]}/$termsize_lines+1))
}

function editor_firstpage {
    page=1
}

function editor_prevpage {
    page=$(($page-1))

    if [[ $page -lt 1 ]]
    then
        page=1
    fi
}

function editor_insertline {
    nextline=$((${#data[@]} + 1))
    linen=$(echo $1 | cut -c2-)
    if [[ $linen = '' ]]
    then
        editor_editline e${nextline}
    else
        lineidx=$(($linen-1))
        editor_display
        echo -e "\033[0;36mInsertion de la ligne ${linen}. \033[0m"
        read -e newline
        dataf=()
        c=0
        while [[ $c -lt $lineidx ]]
        do
            dataf[$c]=${data[c]}
            c=$(($c+1))
        done
        dataf[$lineidx]=${newline}
        c=$lineidx
        while [[ $c -lt ${#data[@]} ]]
        do
            cdat=$(($c+1))
            dataf[$cdat]=${data[c]}
            c=$(($c+1))
        done
        IFS=$'\n' data=(${dataf[@]})
    fi
    edited=1
}

function editor_editline {
    linen=$(echo $1 | cut -c2-)
    lineidx=$(($linen-1))
    editor_display
    echo -e "\033[0;36mÉdition de la ligne ${linen}. \033[0m"
    read -i "${data[lineidx]}" -e newline
    data[$lineidx]=${newline}
    prompt="Ligne ${linen} éditée. "
    edited=1
}

function editor_delline {
    edited=1
    linen=$(echo $1 | cut -c2-)
    lineidx=$(($linen-1))
    unset data[lineidx]
    IFS=$'\n' data=(${data[@]})
    prompt="Ligne ${linen} supprimée. "
}

function editor_save {
    content=""
    c=0
    end=${#data[@]}
    while [[ $c -lt $end ]]
    do
        linesave=${data[$c]}
        content="${content}${linesave}\n"
        c=$(($c+1))
    done
    echo -e "UPDATE files SET content='${content}' WHERE id='${id}';" | sqlite3 ${databasefile}
    edited=0
    prompt="Fichier sauvegardé"
}

function editor_exit {
    if [[ $edited -eq 1 ]]
    then
        valid=0
        while [[ $valid -eq 0 ]]
        do
            editor_display
            echo -e "\033[0;36mSouhaitez-vous enregistrer les modifications du fichier (O/N) ? \033[0m"
            read rep
            if [[ $rep = "o" || $rep = "O" ]]
            then
                editor_save
                valid=1
            elif [[ $rep = "n" || $rep = "N" ]]
            then
                valid=1
            fi
        done
    fi
    loop=0
}

if [ ! -f ${databasefile} ]
then
    create_database
fi

case "$1" in
    "-connect"	) connect $2 $3;;
    "-admin"	) admin;;
    *		    ) help;;
esac

exit 0
